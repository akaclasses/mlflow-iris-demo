"""
Classification d'iris - Avec MLflow Tracking
Le scientifique organisÃ© qui documente tout ! ğŸ”¬ğŸ“‹
"""
import mlflow
import mlflow.sklearn
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from datetime import datetime

print("ğŸ”¬ ExpÃ©rience ML avec MLflow - MÃ©thode 'scientifique'")
print(f"ğŸ“… Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# CrÃ©er/utiliser une expÃ©rience (= projet de recherche)
mlflow.set_experiment("iris-classification")

with mlflow.start_run():
    print("ğŸ“‹ DÃ©marrage d'une nouvelle 'run' (expÃ©rience individuelle)")
    
    n_estimators = 15
    max_depth = 3
    test_size = 0.35
    random_seed = 999
    
    mlflow.log_param("n_estimators", n_estimators)
    mlflow.log_param("max_depth", max_depth)
    mlflow.log_param("test_size", test_size) 
    mlflow.log_param("random_seed", random_seed)
    mlflow.log_param("model_type", "RandomForest")
    
    print(f"ğŸ§ª ParamÃ¨tres enregistrÃ©s: {n_estimators} arbres, split {test_size}")
    
    iris = datasets.load_iris()
    X, y = iris.data, iris.target
    
    # Logger les mÃ©tadonnÃ©es des donnÃ©es
    mlflow.log_param("dataset", "iris")
    mlflow.log_param("n_samples", len(X))
    mlflow.log_param("n_features", X.shape[1])
    mlflow.log_param("n_classes", len(iris.target_names))
    
    print(f"ğŸ“Š DonnÃ©es: {len(X)} Ã©chantillons, {X.shape[1]} caractÃ©ristiques")
    
    # 3. Division train/test (mÃªmes paramÃ¨tres)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=random_seed
    )
    
    # 4. EntraÃ®nement
    model = RandomForestClassifier(
        n_estimators=n_estimators, 
        max_depth=max_depth,
        random_state=random_seed
    )
    model.fit(X_train, y_train)
    
    # 5. Ã‰valuation
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    
    mlflow.log_metric("accuracy", accuracy)
    mlflow.log_metric("train_samples", len(X_train))
    mlflow.log_metric("test_samples", len(X_test))
    
    # 6. Sauvegarde automatique et intelligente
    mlflow.sklearn.log_model(model, "model")
    
    print(f"âœ… PrÃ©cision: {accuracy:.2%}")
    print(f"ğŸ“‹ ExpÃ©rience automatiquement enregistrÃ©e dans MLflow !")
